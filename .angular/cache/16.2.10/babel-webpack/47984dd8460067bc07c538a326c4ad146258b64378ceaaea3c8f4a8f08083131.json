{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class EmailValidatorService {\n  //  validate(control: AbstractControl<any, any>): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> {\n  //    const email = control.value;\n  //    return of({\n  //      emailTaken: true\n  //    }).pipe(\n  //      delay(3500)\n  //    );\n  //  }\n  validate(control) {\n    const email = control.value;\n    const httpCallObservable = new Observable(subscriber => {\n      console.log({\n        email\n      });\n      if (email === 'danielvillamorales@gmail.com') {\n        subscriber.next({\n          emailTaken: true\n        });\n        subscriber.complete();\n        //return\n      }\n\n      subscriber.next(null);\n      subscriber.complete();\n    });\n    return httpCallObservable;\n  }\n  isFieldOneEqualFieldTwo(field1, field2) {}\n  static #_ = this.ɵfac = function EmailValidatorService_Factory(t) {\n    return new (t || EmailValidatorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmailValidatorService,\n    factory: EmailValidatorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Observable","EmailValidatorService","validate","control","email","value","httpCallObservable","subscriber","console","log","next","emailTaken","complete","isFieldOneEqualFieldTwo","field1","field2","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\importante\\angular\\07-formApp\\src\\app\\shared\\validators\\email-validator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AbstractControl, AsyncValidator, ValidationErrors } from '@angular/forms';\r\nimport { Observable, delay, of } from 'rxjs';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class EmailValidatorService implements AsyncValidator{\r\n\r\n\r\n//  validate(control: AbstractControl<any, any>): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> {\r\n//    const email = control.value;\r\n//    return of({\r\n//      emailTaken: true\r\n//    }).pipe(\r\n//      delay(3500)\r\n//    );\r\n//  }\r\n\r\nvalidate(control: AbstractControl<any, any>): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> {\r\n  const email = control.value;\r\n  const httpCallObservable = new Observable<ValidationErrors | null>(subscriber => {\r\n    console.log({email});\r\n    if (email === 'danielvillamorales@gmail.com'){\r\n      subscriber.next({emailTaken: true});\r\n      subscriber.complete();\r\n      //return\r\n    }\r\n    subscriber.next(null);\r\n    subscriber.complete();\r\n  });\r\n  return httpCallObservable\r\n  }\r\n\r\n  isFieldOneEqualFieldTwo(field1: string, field2: string) {\r\n\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,QAAmB,MAAM;;AAG5C,OAAM,MAAOC,qBAAqB;EAGlC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,QAAQA,CAACC,OAAkC;IACzC,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK;IAC3B,MAAMC,kBAAkB,GAAG,IAAIN,UAAU,CAA0BO,UAAU,IAAG;MAC9EC,OAAO,CAACC,GAAG,CAAC;QAACL;MAAK,CAAC,CAAC;MACpB,IAAIA,KAAK,KAAK,8BAA8B,EAAC;QAC3CG,UAAU,CAACG,IAAI,CAAC;UAACC,UAAU,EAAE;QAAI,CAAC,CAAC;QACnCJ,UAAU,CAACK,QAAQ,EAAE;QACrB;;;MAEFL,UAAU,CAACG,IAAI,CAAC,IAAI,CAAC;MACrBH,UAAU,CAACK,QAAQ,EAAE;IACvB,CAAC,CAAC;IACF,OAAON,kBAAkB;EACzB;EAEAO,uBAAuBA,CAACC,MAAc,EAAEC,MAAc,GAEtD;EAAC,QAAAC,CAAA,G;qBA7BUf,qBAAqB;EAAA;EAAA,QAAAgB,EAAA,G;WAArBhB,qBAAqB;IAAAiB,OAAA,EAArBjB,qBAAqB,CAAAkB,IAAA;IAAAC,UAAA,EADT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}