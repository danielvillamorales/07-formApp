{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidatorsService {\n  constructor() {\n    this.cantBeStrider = control => {\n      const value = control.value.trim().toLowerCase();\n      if (value === 'strider') {\n        return {\n          noStrider: true\n        };\n      }\n      return null; // si no hay error\n    };\n\n    this.firstNameAndLastnamePattern = '([a-zA-Z]+) ([a-zA-Z]+)';\n    this.emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\n  }\n  isValidField(field, form) {\n    return form.controls[field].errors && form.controls[field].touched;\n  }\n  isFieldOneEqualFieldTwo(field1, field2) {\n    return formGroup => {\n      const fieldValue1 = formGroup.get(field1)?.value;\n      const fieldValue2 = formGroup.get(field2)?.value;\n      if (fieldValue1 !== fieldValue2) {\n        formGroup.get(field2)?.setErrors({\n          noEqual: true\n        });\n        return {\n          noEqual: true\n        };\n      }\n      formGroup.get(field2)?.setErrors(null);\n      return null;\n    };\n  }\n  static #_ = this.ɵfac = function ValidatorsService_Factory(t) {\n    return new (t || ValidatorsService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidatorsService,\n    factory: ValidatorsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ValidatorsService","constructor","cantBeStrider","control","value","trim","toLowerCase","noStrider","firstNameAndLastnamePattern","emailPattern","isValidField","field","form","controls","errors","touched","isFieldOneEqualFieldTwo","field1","field2","formGroup","fieldValue1","get","fieldValue2","setErrors","noEqual","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\importante\\angular\\07-formApp\\src\\app\\shared\\services\\validators.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors } from '@angular/forms';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class ValidatorsService {\r\n  constructor() { }\r\n\r\n  public cantBeStrider = (control: FormControl): ValidationErrors | null => {\r\n    const value = control.value.trim().toLowerCase();\r\n    if (value === 'strider') {\r\n      return {\r\n        noStrider: true\r\n      }\r\n    }\r\n    return null // si no hay error\r\n  }\r\n\r\n\r\n\r\n  public firstNameAndLastnamePattern: string = '([a-zA-Z]+) ([a-zA-Z]+)';\r\n  public emailPattern: string = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\r\n\r\n  public isValidField(field: string, form : FormGroup) {\r\n    return (form.controls[field].errors && form.controls[field].touched)\r\n  }\r\n\r\n  isFieldOneEqualFieldTwo(field1: string, field2: string) {\r\n    return (formGroup: AbstractControl) : ValidationErrors | null => {\r\n      const fieldValue1 = formGroup.get(field1)?.value;\r\n      const fieldValue2 = formGroup.get(field2)?.value;\r\n      if (fieldValue1 !== fieldValue2) {\r\n        formGroup.get(field2)?.setErrors({noEqual: true});\r\n        return {noEqual: true};\r\n      }\r\n      formGroup.get(field2)?.setErrors(null);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAIA,OAAM,MAAOA,iBAAiB;EAC5BC,YAAA;IAEO,KAAAC,aAAa,GAAIC,OAAoB,IAA6B;MACvE,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,CAACC,IAAI,EAAE,CAACC,WAAW,EAAE;MAChD,IAAIF,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO;UACLG,SAAS,EAAE;SACZ;;MAEH,OAAO,IAAI,EAAC;IACd,CAAC;;IAIM,KAAAC,2BAA2B,GAAW,yBAAyB;IAC/D,KAAAC,YAAY,GAAW,2CAA2C;EAfzD;EAiBTC,YAAYA,CAACC,KAAa,EAAEC,IAAgB;IACjD,OAAQA,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC,CAACG,MAAM,IAAIF,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC,CAACI,OAAO;EACrE;EAEAC,uBAAuBA,CAACC,MAAc,EAAEC,MAAc;IACpD,OAAQC,SAA0B,IAA8B;MAC9D,MAAMC,WAAW,GAAGD,SAAS,CAACE,GAAG,CAACJ,MAAM,CAAC,EAAEb,KAAK;MAChD,MAAMkB,WAAW,GAAGH,SAAS,CAACE,GAAG,CAACH,MAAM,CAAC,EAAEd,KAAK;MAChD,IAAIgB,WAAW,KAAKE,WAAW,EAAE;QAC/BH,SAAS,CAACE,GAAG,CAACH,MAAM,CAAC,EAAEK,SAAS,CAAC;UAACC,OAAO,EAAE;QAAI,CAAC,CAAC;QACjD,OAAO;UAACA,OAAO,EAAE;QAAI,CAAC;;MAExBL,SAAS,CAACE,GAAG,CAACH,MAAM,CAAC,EAAEK,SAAS,CAAC,IAAI,CAAC;MACtC,OAAO,IAAI;IACb,CAAC;EACH;EAAC,QAAAE,CAAA,G;qBAjCUzB,iBAAiB;EAAA;EAAA,QAAA0B,EAAA,G;WAAjB1B,iBAAiB;IAAA2B,OAAA,EAAjB3B,iBAAiB,CAAA4B,IAAA;IAAAC,UAAA,EADL;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}